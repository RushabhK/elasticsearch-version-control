// Code generated by MockGen. DO NOT EDIT.
// Source: service/alias_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAliasService is a mock of AliasService interface
type MockAliasService struct {
	ctrl     *gomock.Controller
	recorder *MockAliasServiceMockRecorder
}

// MockAliasServiceMockRecorder is the mock recorder for MockAliasService
type MockAliasServiceMockRecorder struct {
	mock *MockAliasService
}

// NewMockAliasService creates a new mock instance
func NewMockAliasService(ctrl *gomock.Controller) *MockAliasService {
	mock := &MockAliasService{ctrl: ctrl}
	mock.recorder = &MockAliasServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAliasService) EXPECT() *MockAliasServiceMockRecorder {
	return m.recorder
}

// SetAlias mocks base method
func (m *MockAliasService) SetAlias(alias, index string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAlias", alias, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAlias indicates an expected call of SetAlias
func (mr *MockAliasServiceMockRecorder) SetAlias(alias, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlias", reflect.TypeOf((*MockAliasService)(nil).SetAlias), alias, index)
}

// GetIndexVersion mocks base method
func (m *MockAliasService) GetIndexVersion(alias string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexVersion", alias)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexVersion indicates an expected call of GetIndexVersion
func (mr *MockAliasServiceMockRecorder) GetIndexVersion(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexVersion", reflect.TypeOf((*MockAliasService)(nil).GetIndexVersion), alias)
}
